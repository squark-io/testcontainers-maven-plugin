package io.squark.testcontainersmavenplugin;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Execute;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.testcontainers.containers.Container;
import org.testcontainers.containers.GenericContainer;

@Mojo(name = "start-containers")
@Execute(goal = "start-containers", phase = LifecyclePhase.PRE_INTEGRATION_TEST)
public class StartContainersMojo extends AbstractContainersMojo {

  public void execute() throws MojoExecutionException {
    final List<Container> containers = new ArrayList<>();
    for (ContainerDefinition containerDefinition : containerDefinitions) {

      GenericContainer container = new GenericContainer(containerDefinition.getImageName());
      container.waitingFor(new GenericContainer.AbstractWaitStrategy() {
        @Override
        protected void waitUntilReady() {
          // Do nothing
        }
      });
      container.setNetworkAliases(containerDefinition.getAliases());
      containerDefinition.getExposedPorts().forEach(container::addExposedPort);
      containerDefinition.getEnvironment().forEach(container::addEnv);
      container.start();
      containers.add(container);
    }
    writeContainerData(containers);
  }

  private void writeContainerData(List<Container> containers) throws MojoExecutionException {
    if (tempDirectory.exists()) {
      try {
        FileUtils.deleteDirectory(tempDirectory);
      } catch (IOException e) {
        throw new MojoExecutionException("Failed to delete directory " + tempDirectory.getAbsolutePath(), e);
      }
    }
    if (!tempDirectory.mkdir()) {
      throw new MojoExecutionException("Failed to create directory " + tempDirectory.getAbsolutePath());
    }
    Properties properties = new Properties();
    containers.forEach(container -> properties.setProperty(container.getContainerId(), container.getDockerImageName()));
    File containersFile = new File(tempDirectory, propertiesFile);
    try (FileOutputStream fos = new FileOutputStream(containersFile)) {
      properties.store(fos, "Temporary autogenerated file. Do not edit.");
    } catch (IOException e) {
      throw new MojoExecutionException("Failed to open temporary file " + containersFile.getAbsolutePath(), e);
    }
  }

}
